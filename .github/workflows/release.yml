on:
  push:
    tags:
      - "*"

jobs:
  release:
    permissions:
      contents: write
    runs-on: "${{ matrix.os }}"
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe
    steps:
      - name: install aws-lc-rs build pre-reqs for arm on ubuntu
        if: ${{ matrix.target == 'aarch64-unknown-linux-musl' }}
        run: sudo apt-get update && sudo apt-get install -y gcc-multilib
      - name: install aws-lc-rs build pre-reqs for windows
        if: ${{ matrix.target == 'x86_64-pc-windows-msvc' }}
        run: |
          choco install nasm -y
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: "${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: "${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ contains(fromJSON('["aarch64-unknown-linux-musl", "x86_64-unknown-linux-musl"]'), matrix.target) }}
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Codesign executable
        if: ${{ matrix.target == 'x86_64-apple-darwin' }}
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_CODESIGNING_IDENTITY: ${{ secrets.APPLE_CODESIGNING_IDENTITY }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate
          echo -n "$MACOS_CERTIFICATE" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain

          security -q create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security -q default-keychain -s $KEYCHAIN_PATH
          security -q unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # make cert accessible by codesign
          security -q import $CERTIFICATE_PATH -P "$MACOS_CERTIFICATE_PWD" -k $KEYCHAIN_PATH -T /usr/bin/codesign

          # avoid password prompt
          security -q set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # give permissions
          chmod +x ./target/${{ matrix.target }}/release/peridio-cli

          # code sign
          /usr/bin/codesign -s $APPLE_CODESIGNING_IDENTITY --deep -f --timestamp -o runtime ./target/${{ matrix.target }}/release/peridio-cli

          # verify signing
          /usr/bin/codesign --verify --strict ./target/${{ matrix.target }}/release/peridio-cli

          # zip file, notarize tool only works with zip files
          ditto -c -k --sequesterRsrc --keepParent "./target/${{ matrix.target }}/release/peridio-cli" "./target/${{ matrix.target }}/release/peridio-cli.zip"

          # notarize app
          xcrun notarytool submit \
            --wait \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APP_PASSWORD" \
            "./target/${{ matrix.target }}/release/peridio-cli.zip"
      - name: Package release
        run: |
          mv ./target/${{ matrix.target }}/release/peridio-cli${{ matrix.suffix }} ./peridio${{ matrix.suffix }}
          tar -czf peridio-${{ github.ref_name }}_${{ matrix.target }}.tar.gz ./peridio${{ matrix.suffix }}
      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: peridio-${{ github.ref_name }}_${{ matrix.target }}.tar.gz
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
